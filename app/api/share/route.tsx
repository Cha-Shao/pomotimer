import { WEBSITE_URL } from "@/config"
import classNames from "classnames"
import dayjs from "dayjs"
import { readFile } from "fs/promises"
import {
  ImageResponse,
  NextRequest,
} from "next/server"
import { join } from "path"
import { fileURLToPath } from "url"

// style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}
// <=>
// style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}
const JinRiYiZhuanZhu = () => (
  <svg width="97.44" height="18.42" viewBox="0 0 97.44 18.42" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 77.32 6.74 L 77.32 7.42 L 66.16 7.42 Q 65.6 9.209 65.154 10.279 A 14.268 14.268 0 0 1 65.06 10.5 L 74.68 10.5 L 74.68 11.18 L 70.4 16 A 338.208 338.208 0 0 1 72.338 16.86 Q 73.247 17.267 74.052 17.636 A 196.348 196.348 0 0 1 74.28 17.74 L 74.02 18.42 Q 71.76 17.36 68.23 15.79 Q 65.527 14.588 63.71 13.814 A 131.192 131.192 0 0 0 62.68 13.38 L 62.92 12.74 Q 64.96 13.58 69.74 15.7 L 73.78 11.16 L 64.24 11.16 L 64.24 10.56 A 31.722 31.722 0 0 0 64.784 9.193 Q 65.092 8.366 65.4 7.42 L 60.14 7.42 L 60.14 6.74 L 65.62 6.74 Q 66.06 5.22 66.5 3.58 L 61.3 3.58 L 61.3 2.9 L 66.66 2.9 Q 67.08 1.12 67.28 0.06 L 67.98 0.16 A 37.118 37.118 0 0 1 67.805 1.07 Q 67.721 1.479 67.62 1.936 A 77.817 77.817 0 0 1 67.4 2.9 L 76.16 2.9 L 76.16 3.58 L 67.24 3.58 L 67.14 3.98 Q 67.044 4.324 66.929 4.762 A 82.407 82.407 0 0 0 66.82 5.18 A 33.049 33.049 0 0 1 66.622 5.914 Q 66.514 6.294 66.388 6.713 A 54.571 54.571 0 0 1 66.38 6.74 L 77.32 6.74 Z M 55.92 14.72 L 56.02 11.9 L 56.74 12.08 A 8.997 8.997 0 0 1 56.736 12.314 Q 56.718 12.97 56.62 14.92 A 7.61 7.61 0 0 1 56.57 15.474 Q 56.498 16.026 56.349 16.383 A 1.843 1.843 0 0 1 56.29 16.51 A 1.383 1.383 0 0 1 55.618 17.145 A 1.932 1.932 0 0 1 55.37 17.24 Q 54.822 17.409 53.811 17.435 A 14.99 14.99 0 0 1 53.42 17.44 L 45.1 17.44 A 9.956 9.956 0 0 1 44.414 17.418 Q 43.661 17.366 43.19 17.19 A 1.636 1.636 0 0 1 42.241 16.315 A 1.97 1.97 0 0 1 42.23 16.29 A 2.692 2.692 0 0 1 42.071 15.8 Q 41.94 15.233 41.94 14.4 L 41.94 4.88 L 42.68 4.88 L 42.68 8.04 L 54.36 8.04 L 54.36 2.34 L 41.28 2.34 L 41.28 1.62 L 55.06 1.62 L 55.06 8.74 L 42.68 8.74 L 42.68 14.28 A 8.243 8.243 0 0 0 42.697 14.823 Q 42.73 15.326 42.83 15.66 A 1.824 1.824 0 0 0 42.89 15.83 A 1.23 1.23 0 0 0 43.581 16.521 A 1.556 1.556 0 0 0 43.63 16.54 Q 44.077 16.709 44.93 16.735 A 10.686 10.686 0 0 0 45.26 16.74 L 53.26 16.74 Q 54.38 16.74 54.91 16.59 A 1.447 1.447 0 0 0 55.25 16.449 A 1.016 1.016 0 0 0 55.65 16.03 Q 55.825 15.688 55.896 15.003 A 7.807 7.807 0 0 0 55.92 14.72 Z M 96.16 10.34 L 91.2 10.34 L 91.2 16.36 L 97.44 16.36 L 97.44 17.02 L 84.1 17.02 L 84.1 16.36 L 90.5 16.36 L 90.5 10.34 L 85.56 10.34 L 85.56 9.64 L 90.5 9.64 L 90.5 4.42 L 85.44 4.42 L 85.44 3.72 L 96.94 3.72 L 96.94 4.42 L 91.2 4.42 L 91.2 9.64 L 96.16 9.64 L 96.16 10.34 Z M 23.34 18.06 L 22.62 18.06 L 22.62 1.82 L 34.88 1.82 L 34.88 18.06 L 34.16 18.06 L 34.16 16.42 L 23.34 16.42 L 23.34 18.06 Z M 0.36 9.02 L 0 8.38 Q 2.62 6.78 4.83 4.59 A 23.824 23.824 0 0 0 7.276 1.77 A 20.161 20.161 0 0 0 8.44 0 L 9.08 0 A 19.514 19.514 0 0 0 11.306 3.228 A 23.619 23.619 0 0 0 12.59 4.63 Q 14.78 6.84 17.46 8.36 L 17.1 9.02 A 24.668 24.668 0 0 1 12.581 5.555 A 27.32 27.32 0 0 1 12.3 5.28 A 23.957 23.957 0 0 1 10.18 2.893 A 18.624 18.624 0 0 1 8.74 0.74 A 22.346 22.346 0 0 1 6.449 3.847 A 27.068 27.068 0 0 1 5.12 5.26 Q 2.92 7.44 0.36 9.02 Z M 14.24 10.42 L 14.24 11.08 A 23.849 23.849 0 0 1 13.457 12.451 Q 13.053 13.11 12.565 13.827 A 45.889 45.889 0 0 1 11.95 14.71 A 45.735 45.735 0 0 1 10.71 16.369 Q 10.126 17.113 9.569 17.749 A 26.124 26.124 0 0 1 9.2 18.16 L 8.6 17.74 Q 9.675 16.613 10.818 15.057 A 39.166 39.166 0 0 0 11.17 14.57 Q 12.5 12.7 13.38 11.1 L 1.98 11.1 L 1.98 10.42 L 14.24 10.42 Z M 34.16 9.32 L 23.34 9.32 L 23.34 15.7 L 34.16 15.7 L 34.16 9.32 Z M 23.34 8.62 L 34.16 8.62 L 34.16 2.52 L 23.34 2.52 L 23.34 8.62 Z M 83.64 10.88 L 83.94 10.98 L 84.26 11.12 Q 84.052 11.667 81.6 17.381 A 3337.671 3337.671 0 0 1 81.3 18.08 L 80.64 17.82 Q 81.16 16.62 82.15 14.34 Q 82.908 12.594 83.379 11.494 A 203.725 203.725 0 0 0 83.64 10.88 Z M 84.16 8.38 L 83.78 8.94 Q 82.1 7.64 82.02 7.56 L 79.96 5.98 L 80.36 5.42 Q 81.62 6.36 84.16 8.38 Z M 7.18 5.58 L 7.7 5.16 Q 8.052 5.635 8.569 6.397 A 78.67 78.67 0 0 1 8.9 6.89 A 67.31 67.31 0 0 1 9.418 7.679 Q 9.82 8.3 10.12 8.8 L 9.6 9.22 A 34.549 34.549 0 0 0 9.203 8.576 Q 9.023 8.29 8.817 7.973 A 69.358 69.358 0 0 0 8.38 7.31 Q 7.813 6.46 7.411 5.898 A 22.663 22.663 0 0 0 7.18 5.58 Z M 84.94 3.6 L 84.56 4.18 A 39.105 39.105 0 0 0 84.066 3.774 Q 83.109 3.001 81.18 1.5 L 81.58 0.96 L 84.94 3.6 Z M 89.66 0.34 L 90.32 0.08 L 91.6 3.02 L 90.96 3.3 L 89.66 0.34 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const XiaoShi = () => (
  <svg width="37.52" height="17.56" viewBox="0 0 37.52 17.56" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 34.96 4.38 L 37.52 4.38 L 37.52 5.08 L 34.96 5.08 L 34.96 15.32 A 6.22 6.22 0 0 1 34.943 15.802 Q 34.898 16.372 34.74 16.71 A 1.199 1.199 0 0 1 34.162 17.287 A 1.677 1.677 0 0 1 33.96 17.37 A 2.736 2.736 0 0 1 33.578 17.466 Q 33.162 17.543 32.563 17.557 A 11.953 11.953 0 0 1 32.28 17.56 L 29.88 17.56 L 29.74 16.84 L 32.14 16.84 Q 32.898 16.84 33.332 16.753 A 1.974 1.974 0 0 0 33.54 16.7 A 1.244 1.244 0 0 0 33.809 16.58 A 0.831 0.831 0 0 0 34.14 16.22 A 1.289 1.289 0 0 0 34.223 15.978 Q 34.283 15.731 34.296 15.374 A 5.719 5.719 0 0 0 34.3 15.16 L 34.3 5.08 L 27.36 5.08 L 27.36 4.38 L 34.3 4.38 L 34.3 0 L 34.96 0 L 34.96 4.38 Z M 4.24 16.78 L 6.64 16.78 Q 7.5 16.78 7.9 16.63 Q 8.3 16.48 8.45 16.1 Q 8.574 15.787 8.595 15.174 A 7.757 7.757 0 0 0 8.6 14.9 L 8.6 0.28 L 9.36 0.28 L 9.36 15.04 Q 9.36 15.938 9.182 16.448 A 1.76 1.76 0 0 1 9.13 16.58 A 1.335 1.335 0 0 1 8.367 17.303 A 1.706 1.706 0 0 1 8.35 17.31 Q 7.853 17.5 6.957 17.518 A 9.614 9.614 0 0 1 6.76 17.52 L 4.38 17.52 L 4.24 16.78 Z M 21.88 15.5 L 21.88 17.06 L 21.22 17.06 L 21.22 1.9 L 26.64 1.9 L 26.64 15.5 L 21.88 15.5 Z M 12.1 4.28 L 12.74 3.98 Q 13.49 5.435 14.581 7.704 A 319.519 319.519 0 0 1 15.28 9.17 A 296.225 296.225 0 0 1 16.011 10.723 Q 16.715 12.23 17.212 13.346 A 75.176 75.176 0 0 1 17.62 14.28 L 16.92 14.58 Q 16.292 13.064 15.248 10.804 A 219.806 219.806 0 0 0 14.57 9.35 Q 13.399 6.862 12.573 5.212 A 81.789 81.789 0 0 0 12.1 4.28 Z M 0.62 14.74 L 0 14.4 Q 1.221 12.274 2.325 9.44 A 50.99 50.99 0 0 0 2.36 9.35 Q 3.48 6.46 4.1 3.96 L 4.82 4.14 A 39.356 39.356 0 0 1 3.939 7.131 A 50.808 50.808 0 0 1 3.03 9.61 Q 1.88 12.52 0.62 14.74 Z M 26 9 L 21.88 9 L 21.88 14.78 L 26 14.78 L 26 9 Z M 21.88 8.32 L 26 8.32 L 26 2.62 L 21.88 2.62 L 21.88 8.32 Z M 32.06 11.72 L 31.48 12.06 Q 31.31 11.777 29.786 9.356 A 2525.392 2525.392 0 0 0 29.6 9.06 L 28.46 7.22 L 29 6.88 Q 30.12 8.6 32.06 11.72 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const FenZhong = () => (
  <svg width="36.62" height="18.2" viewBox="0 0 36.62 18.2" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 5.56 9.14 L 2.14 9.14 L 2.14 8.48 L 13.62 8.48 A 12.73 12.73 0 0 1 13.606 8.731 Q 13.563 9.427 13.4 11.45 Q 13.2 13.94 13.1 14.88 Q 12.98 15.86 12.66 16.38 A 1.697 1.697 0 0 1 11.892 17.044 A 2.206 2.206 0 0 1 11.7 17.12 Q 11.06 17.34 9.94 17.34 L 7.4 17.34 L 7.28 16.68 L 9.8 16.68 A 9.143 9.143 0 0 0 10.342 16.665 Q 10.869 16.634 11.222 16.536 A 2.245 2.245 0 0 0 11.31 16.51 A 1.555 1.555 0 0 0 11.693 16.331 A 1.198 1.198 0 0 0 12.08 15.92 A 1.89 1.89 0 0 0 12.216 15.616 Q 12.332 15.291 12.399 14.818 A 7.078 7.078 0 0 0 12.42 14.66 Q 12.551 13.516 12.775 10.558 A 488.523 488.523 0 0 0 12.88 9.14 L 6.22 9.14 Q 6.174 9.538 6.128 10.229 A 59.527 59.527 0 0 0 6.1 10.68 A 13.011 13.011 0 0 1 5.943 12.01 Q 5.825 12.69 5.636 13.271 A 7.104 7.104 0 0 1 5.5 13.65 A 5.779 5.779 0 0 1 4.694 15.061 A 7.728 7.728 0 0 1 3.87 15.97 A 10.241 10.241 0 0 1 2.895 16.777 Q 1.942 17.479 0.6 18.2 L 0.16 17.58 A 23.074 23.074 0 0 0 1.341 16.924 Q 1.939 16.567 2.424 16.219 A 9.323 9.323 0 0 0 3.28 15.53 A 7.034 7.034 0 0 0 4.129 14.608 A 5.131 5.131 0 0 0 4.81 13.43 Q 5.26 12.32 5.42 10.66 L 5.56 9.14 Z M 31.6 0 L 32.24 0 L 32.24 4.04 L 36.62 4.04 L 36.62 11.58 L 32.24 11.58 L 32.24 18.04 L 31.6 18.04 L 31.6 11.58 L 27.2 11.58 L 27.2 4.04 L 31.6 4.04 L 31.6 0 Z M 25.76 6.94 L 23.38 6.94 L 23.38 10.12 L 26.36 10.12 L 26.36 10.8 L 23.38 10.8 L 23.38 16.26 L 26.14 14.18 L 26.34 14.78 L 22.72 17.44 L 22.36 16.9 A 3.675 3.675 0 0 0 22.463 16.793 Q 22.56 16.687 22.617 16.606 A 0.832 0.832 0 0 0 22.64 16.57 A 0.485 0.485 0 0 0 22.694 16.442 Q 22.71 16.382 22.716 16.31 A 1.061 1.061 0 0 0 22.72 16.22 L 22.72 10.8 L 20.08 10.8 L 20.08 10.12 L 22.72 10.12 L 22.72 6.94 L 21.06 6.94 L 21.06 6.3 L 25.76 6.3 L 25.76 6.94 Z M 22.68 0.16 L 23.32 0.3 Q 22.96 1.64 22.4 3.06 L 26.5 3.06 L 26.5 3.7 L 22.16 3.7 A 41.858 41.858 0 0 1 21.586 5.008 Q 20.975 6.336 20.429 7.226 A 12.75 12.75 0 0 1 20.42 7.24 L 19.96 6.76 A 17.628 17.628 0 0 0 20.548 5.671 Q 20.981 4.805 21.42 3.73 A 38.018 38.018 0 0 0 22.547 0.601 A 34.613 34.613 0 0 0 22.68 0.16 Z M 9.84 0.24 L 10.5 0 A 20.215 20.215 0 0 0 11.541 2.389 Q 12.271 3.796 13.16 4.87 A 13.246 13.246 0 0 0 15.138 6.789 A 18.175 18.175 0 0 0 17.38 8.3 L 17.02 8.94 A 19.203 19.203 0 0 1 14.707 7.354 A 14.09 14.09 0 0 1 12.66 5.35 Q 11.02 3.36 9.84 0.24 Z M 6.54 0.46 L 7.16 0.76 Q 4.88 5.58 0.38 8.82 L 0 8.24 Q 2.1 6.74 3.79 4.73 Q 5.48 2.72 6.54 0.46 Z M 31.6 4.68 L 27.86 4.68 L 27.86 10.92 L 31.6 10.92 L 31.6 4.68 Z M 35.98 4.68 L 32.24 4.68 L 32.24 10.92 L 35.98 10.92 L 35.98 4.68 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const WoDeJinYiYueZhuanZhuQingKuang = () => (
  <svg width="141.776" height="14.736" viewBox="0 0 141.776 14.736" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 13.776 4.992 L 13.776 5.52 L 8.704 5.52 A 43.277 43.277 0 0 0 8.92 7.416 Q 9.038 8.274 9.183 9.015 A 19.751 19.751 0 0 0 9.424 10.096 Q 11.168 8.56 12.448 6.48 L 12.912 6.784 A 17.957 17.957 0 0 1 10.537 9.795 A 16.001 16.001 0 0 1 9.6 10.672 A 9.857 9.857 0 0 0 9.935 11.605 Q 10.256 12.368 10.656 12.88 Q 10.99 13.326 11.277 13.526 A 1.421 1.421 0 0 0 11.28 13.528 A 1.136 1.136 0 0 0 11.6 13.686 A 0.991 0.991 0 0 0 11.888 13.728 A 0.554 0.554 0 0 0 12.268 13.577 A 0.866 0.866 0 0 0 12.384 13.448 Q 12.592 13.168 12.816 12.32 A 37.353 37.353 0 0 0 12.969 11.575 Q 13.116 10.818 13.182 10.274 A 11.088 11.088 0 0 0 13.184 10.256 L 13.68 10.48 Q 13.434 11.882 13.276 12.542 A 10.119 10.119 0 0 1 13.264 12.592 A 7.235 7.235 0 0 1 13.127 13.075 Q 12.981 13.522 12.811 13.794 A 1.481 1.481 0 0 1 12.704 13.944 A 1.079 1.079 0 0 1 12.372 14.222 A 1.021 1.021 0 0 1 11.888 14.336 A 1.466 1.466 0 0 1 11.087 14.095 A 1.809 1.809 0 0 1 11.016 14.048 Q 10.72 13.839 10.419 13.461 A 5.355 5.355 0 0 1 10.192 13.152 A 5.261 5.261 0 0 1 9.776 12.493 Q 9.588 12.145 9.414 11.723 A 11.931 11.931 0 0 1 9.152 11.024 A 18.163 18.163 0 0 1 6.458 12.782 A 21.539 21.539 0 0 1 5.264 13.376 L 5.008 12.864 Q 7.28 11.84 8.992 10.464 Q 8.627 9.185 8.377 7.393 A 42.853 42.853 0 0 1 8.16 5.52 L 3.904 5.52 L 3.904 8.544 A 671.831 671.831 0 0 1 4.526 8.378 Q 6.568 7.836 6.736 7.808 L 6.8 8.08 L 6.832 8.352 Q 6.575 8.397 4.195 9.013 A 640.74 640.74 0 0 0 3.904 9.088 L 3.904 12.528 Q 3.904 13.376 3.504 13.712 A 1.122 1.122 0 0 1 3.178 13.896 Q 2.86 14.017 2.373 14.042 A 5.171 5.171 0 0 1 2.112 14.048 L 0.656 14.048 L 0.544 13.504 L 2.032 13.504 Q 2.503 13.504 2.777 13.432 A 1.15 1.15 0 0 0 2.856 13.408 A 0.761 0.761 0 0 0 3.041 13.317 A 0.562 0.562 0 0 0 3.24 13.08 A 0.97 0.97 0 0 0 3.298 12.902 Q 3.341 12.718 3.344 12.458 A 3.466 3.466 0 0 0 3.344 12.416 L 3.344 9.232 L 0.16 10.064 L 0.064 9.52 Q 0.24 9.488 3.344 8.688 L 3.344 5.52 L 0 5.52 L 0 4.992 L 3.344 4.992 L 3.344 2.192 A 48.751 48.751 0 0 1 0.885 2.566 A 44.156 44.156 0 0 1 0.544 2.608 L 0.496 2.096 A 36.715 36.715 0 0 0 5.251 1.239 A 32.799 32.799 0 0 0 6.288 0.96 L 6.4 1.456 A 22.649 22.649 0 0 1 5.051 1.827 A 28.512 28.512 0 0 1 3.904 2.08 L 3.904 4.992 L 8.112 4.992 Q 8.016 3.952 7.984 3.28 Q 7.856 0.944 7.824 0.176 L 8.368 0.176 Q 8.368 0.672 8.464 2.208 L 8.528 3.248 Q 8.55 3.743 8.602 4.382 A 51.793 51.793 0 0 0 8.656 4.992 L 13.776 4.992 Z M 93.792 5.392 L 93.792 5.936 L 84.864 5.936 A 43.281 43.281 0 0 1 84.565 6.857 Q 84.293 7.663 84.059 8.223 A 11.415 11.415 0 0 1 83.984 8.4 L 91.68 8.4 L 91.68 8.944 L 88.256 12.8 Q 90 13.568 91.36 14.192 L 91.152 14.736 Q 89.344 13.888 86.52 12.632 Q 83.696 11.376 82.08 10.704 L 82.272 10.192 Q 83.775 10.811 87.137 12.298 A 689.427 689.427 0 0 1 87.728 12.56 L 90.96 8.928 L 83.328 8.928 L 83.328 8.448 Q 83.792 7.36 84.256 5.936 L 80.048 5.936 L 80.048 5.392 L 84.432 5.392 Q 84.784 4.176 85.136 2.864 L 80.976 2.864 L 80.976 2.32 L 85.264 2.32 Q 85.6 0.896 85.76 0.048 L 86.32 0.128 Q 86.21 0.744 86.032 1.549 A 62.253 62.253 0 0 1 85.856 2.32 L 92.864 2.32 L 92.864 2.864 L 85.728 2.864 L 85.648 3.184 Q 85.536 3.584 85.392 4.144 Q 85.25 4.695 85.047 5.37 A 41.329 41.329 0 0 1 85.04 5.392 L 93.792 5.392 Z M 108.864 8.272 L 104.896 8.272 L 104.896 13.088 L 109.888 13.088 L 109.888 13.616 L 99.216 13.616 L 99.216 13.088 L 104.336 13.088 L 104.336 8.272 L 100.384 8.272 L 100.384 7.712 L 104.336 7.712 L 104.336 3.536 L 100.288 3.536 L 100.288 2.976 L 109.488 2.976 L 109.488 3.536 L 104.896 3.536 L 104.896 7.712 L 108.864 7.712 L 108.864 8.272 Z M 141.264 10.544 L 141.776 10.64 Q 141.776 11.228 141.748 12.154 A 112.948 112.948 0 0 1 141.728 12.752 Q 141.7 13.208 141.589 13.461 A 0.878 0.878 0 0 1 141.56 13.52 A 0.706 0.706 0 0 1 141.246 13.822 A 0.987 0.987 0 0 1 141.104 13.88 A 1.62 1.62 0 0 1 140.886 13.933 Q 140.594 13.984 140.144 13.984 L 139.2 13.984 Q 138.531 13.984 138.192 13.783 A 0.803 0.803 0 0 1 138.072 13.696 Q 137.756 13.419 137.744 12.74 A 3.057 3.057 0 0 1 137.744 12.688 L 137.744 7.328 L 135.104 7.328 L 135.088 7.744 A 10.063 10.063 0 0 1 135.087 7.873 Q 135.085 8.085 135.072 8.16 Q 134.992 9.936 134.608 11.04 Q 134.224 12.144 133.368 12.968 Q 132.512 13.792 130.928 14.624 L 130.608 14.176 A 15.969 15.969 0 0 0 131.505 13.688 Q 132.413 13.154 132.968 12.632 Q 133.776 11.872 134.128 10.848 A 6.469 6.469 0 0 0 134.346 10.027 Q 134.432 9.599 134.487 9.094 A 15.655 15.655 0 0 0 134.56 8.144 L 134.592 7.328 L 132.624 7.328 L 132.624 1.376 L 140.576 1.376 L 140.576 7.328 L 138.288 7.328 L 138.288 12.56 Q 138.288 13 138.438 13.207 A 0.456 0.456 0 0 0 138.504 13.28 Q 138.679 13.436 139.112 13.465 A 3.191 3.191 0 0 0 139.328 13.472 L 140.064 13.472 Q 140.468 13.472 140.698 13.427 A 1.057 1.057 0 0 0 140.808 13.4 A 0.654 0.654 0 0 0 140.944 13.342 Q 141.066 13.27 141.12 13.152 Q 141.187 13.004 141.209 12.719 A 3.32 3.32 0 0 0 141.216 12.608 Q 141.253 11.579 141.261 10.916 A 28.812 28.812 0 0 0 141.264 10.544 Z M 42.496 6.064 L 38.448 6.064 Q 38.432 7.824 38.288 8.824 Q 38.144 9.824 37.744 10.608 A 6.392 6.392 0 0 1 37.388 11.214 Q 37.185 11.522 36.923 11.859 A 14.675 14.675 0 0 1 36.48 12.4 L 36.032 12.032 A 15.192 15.192 0 0 0 36.525 11.438 Q 37.008 10.823 37.271 10.328 A 4.549 4.549 0 0 0 37.28 10.312 A 4.6 4.6 0 0 0 37.641 9.387 A 6.079 6.079 0 0 0 37.8 8.608 A 10.934 10.934 0 0 0 37.869 7.954 Q 37.936 7.091 37.936 5.808 L 37.936 1.92 Q 39.648 1.808 41.504 1.48 Q 43.36 1.152 44.864 0.688 L 45.04 1.216 Q 43.632 1.664 41.864 1.992 Q 40.096 2.32 38.448 2.448 L 38.448 5.536 L 45.68 5.536 L 45.68 6.064 L 43.024 6.064 L 43.024 12.56 L 42.496 12.56 L 42.496 6.064 Z M 124.944 4.16 L 121.12 4.16 L 121.12 5.648 L 125.808 5.648 L 125.808 6.096 L 116.128 6.096 L 116.128 5.648 L 120.592 5.648 L 120.592 4.16 L 117.168 4.16 L 117.168 3.728 L 120.592 3.728 L 120.592 2.32 L 116.688 2.32 L 116.688 1.856 L 120.592 1.856 L 120.592 0.208 L 121.12 0.208 L 121.12 1.856 L 125.408 1.856 L 125.408 2.32 L 121.12 2.32 L 121.12 3.728 L 124.944 3.728 L 124.944 4.16 Z M 66.608 1.072 L 75.376 1.072 L 75.376 12.416 A 4.926 4.926 0 0 1 75.362 12.8 Q 75.327 13.253 75.2 13.512 A 0.951 0.951 0 0 1 74.726 13.966 A 1.298 1.298 0 0 1 74.6 14.016 Q 74.224 14.144 73.527 14.158 A 8.837 8.837 0 0 1 73.344 14.16 L 71.568 14.16 L 71.472 13.616 L 73.248 13.616 Q 73.791 13.616 74.105 13.551 A 1.42 1.42 0 0 0 74.256 13.512 Q 74.576 13.408 74.696 13.144 A 1.037 1.037 0 0 0 74.759 12.954 Q 74.806 12.756 74.814 12.468 A 4.472 4.472 0 0 0 74.816 12.336 L 74.816 9.456 L 67.056 9.456 Q 66.946 10.706 66.624 11.627 A 5.542 5.542 0 0 1 66.408 12.16 A 7.753 7.753 0 0 1 65.945 12.995 Q 65.681 13.412 65.337 13.865 A 17.716 17.716 0 0 1 64.752 14.592 L 64.288 14.256 A 18.252 18.252 0 0 0 64.883 13.526 Q 65.179 13.14 65.408 12.791 A 7.493 7.493 0 0 0 65.8 12.128 A 5.971 5.971 0 0 0 66.247 10.972 A 7.878 7.878 0 0 0 66.448 10 A 13.351 13.351 0 0 0 66.539 9.167 Q 66.612 8.26 66.622 6.998 A 51.821 51.821 0 0 0 66.624 6.576 L 66.608 1.072 Z M 24.256 2.88 L 29.072 2.88 Q 29.04 4.352 28.936 7.384 Q 28.832 10.416 28.752 12.192 Q 28.722 12.873 28.556 13.253 A 1.307 1.307 0 0 1 28.528 13.312 A 1.067 1.067 0 0 1 27.989 13.818 A 1.408 1.408 0 0 1 27.896 13.856 Q 27.499 14.001 26.781 14.015 A 8.075 8.075 0 0 1 26.624 14.016 L 24.704 14.016 L 24.608 13.456 L 26.496 13.456 A 6.406 6.406 0 0 0 26.857 13.447 Q 27.285 13.422 27.544 13.336 Q 27.904 13.216 28.056 12.904 A 1.354 1.354 0 0 0 28.139 12.68 Q 28.218 12.402 28.24 11.984 Q 28.272 11.568 28.36 8.912 Q 28.448 6.256 28.48 5.072 A 324.345 324.345 0 0 1 28.491 4.61 Q 28.513 3.76 28.526 3.483 A 6.644 6.644 0 0 1 28.528 3.44 L 24.016 3.44 A 16.568 16.568 0 0 1 23.325 4.899 A 12.226 12.226 0 0 1 22.56 6.144 L 22.096 5.824 A 13.44 13.44 0 0 0 23.218 3.888 A 15.894 15.894 0 0 0 23.592 3.04 Q 24.224 1.488 24.608 0 L 25.136 0.128 Q 24.72 1.664 24.256 2.88 Z M 39.392 13.424 L 45.824 13.424 L 45.728 13.968 L 39.376 13.968 A 15.09 15.09 0 0 1 38.559 13.947 Q 38.16 13.925 37.817 13.881 A 6.592 6.592 0 0 1 37.288 13.792 Q 36.464 13.616 35.808 13.152 A 4.932 4.932 0 0 1 35.27 12.706 Q 35.021 12.471 34.769 12.179 A 9.725 9.725 0 0 1 34.464 11.808 L 32.32 14.208 L 32 13.728 L 34.192 11.312 L 34.192 6.16 L 32.128 6.16 L 32.128 5.6 L 34.736 5.6 L 34.736 11.296 A 8.346 8.346 0 0 0 35.208 11.89 Q 35.453 12.169 35.694 12.383 A 3.945 3.945 0 0 0 35.992 12.624 A 3.741 3.741 0 0 0 37.368 13.242 A 4.258 4.258 0 0 0 37.392 13.248 A 6.258 6.258 0 0 0 38.026 13.354 Q 38.622 13.424 39.392 13.424 Z M 19.152 0.112 L 19.712 0.224 Q 19.488 1.344 18.976 2.88 L 21.76 2.88 L 21.76 13.36 L 17.28 13.36 L 17.28 14.576 L 16.752 14.576 L 16.752 2.88 L 18.416 2.88 Q 18.816 1.776 19.152 0.112 Z M 117.808 14.336 L 117.28 14.336 L 117.28 7.472 L 124.608 7.472 L 124.608 12.816 Q 124.608 13.487 124.372 13.798 A 0.687 0.687 0 0 1 124.272 13.904 Q 123.999 14.138 123.347 14.182 A 4.81 4.81 0 0 1 123.024 14.192 L 121.568 14.192 L 121.504 13.728 L 122.896 13.728 Q 123.327 13.728 123.577 13.669 A 1.071 1.071 0 0 0 123.68 13.64 A 0.749 0.749 0 0 0 123.826 13.573 Q 123.914 13.519 123.968 13.446 A 0.417 0.417 0 0 0 124.016 13.36 A 0.79 0.79 0 0 0 124.056 13.228 Q 124.087 13.089 124.094 12.888 A 3.531 3.531 0 0 0 124.096 12.768 L 124.096 11.872 L 117.808 11.872 L 117.808 14.336 Z M 116.384 4.416 L 116.096 4.832 Q 115.616 4.304 114.624 3.28 L 114.624 14.432 L 114.112 14.432 L 114.112 0.288 L 114.624 0.288 L 114.624 2.592 L 116.384 4.416 Z M 48.016 7.216 L 48.016 6.592 L 61.824 6.592 L 61.824 7.216 L 48.016 7.216 Z M 140.064 6.784 L 140.064 1.904 L 133.184 1.904 L 133.184 6.784 L 140.064 6.784 Z M 67.152 5.072 L 74.816 5.072 L 74.816 1.616 L 67.152 1.616 L 67.152 5.072 Z M 67.088 8.944 L 74.816 8.944 L 74.816 5.6 L 67.152 5.6 L 67.152 6.608 Q 67.152 8.048 67.088 8.944 Z M 21.232 8.368 L 17.28 8.368 L 17.28 12.816 L 21.232 12.816 L 21.232 8.368 Z M 17.28 3.456 L 17.28 7.808 L 21.232 7.808 L 21.232 3.456 L 17.28 3.456 Z M 124.096 9.904 L 117.808 9.904 L 117.808 11.424 L 124.096 11.424 L 124.096 9.904 Z M 117.808 9.44 L 124.096 9.44 L 124.096 7.92 L 117.808 7.92 L 117.808 9.44 Z M 128.464 13.648 L 127.984 13.36 L 130.72 7.248 L 131.232 7.456 L 128.464 13.648 Z M 98.848 8.704 L 99.088 8.784 L 99.344 8.896 Q 99.168 9.36 96.976 14.464 L 96.448 14.256 Q 96.864 13.296 97.656 11.472 Q 98.262 10.076 98.639 9.195 A 162.955 162.955 0 0 0 98.848 8.704 Z M 112.32 8.352 L 111.84 8.24 Q 112.064 7.248 112.32 5.688 Q 112.559 4.232 112.7 3.047 A 42.87 42.87 0 0 0 112.72 2.88 L 113.2 2.928 Q 113.04 4.144 112.784 5.768 Q 112.566 7.154 112.382 8.057 A 23.774 23.774 0 0 1 112.32 8.352 Z M 131.168 5.008 L 130.672 5.28 Q 130.366 4.729 129.858 3.868 A 143.727 143.727 0 0 0 129.528 3.312 Q 128.784 2.064 128.256 1.2 L 128.704 0.944 Q 130.148 3.27 131.073 4.845 A 93.781 93.781 0 0 1 131.168 5.008 Z M 26.368 9.296 L 25.904 9.616 Q 25.119 8.516 23.438 6.275 A 520.716 520.716 0 0 0 23.376 6.192 L 23.792 5.872 Q 25.04 7.456 26.368 9.296 Z M 99.264 6.704 L 98.96 7.152 A 420.044 420.044 0 0 1 98.644 6.907 Q 97.721 6.192 97.576 6.069 A 0.455 0.455 0 0 1 97.552 6.048 L 95.904 4.784 L 96.224 4.336 Q 97.232 5.088 99.264 6.704 Z M 12.848 3.424 L 12.464 3.808 Q 12.049 3.379 11.378 2.744 A 67.206 67.206 0 0 0 11.216 2.592 Q 10.432 1.856 9.744 1.248 L 10.096 0.88 Q 11.408 2.016 12.848 3.424 Z M 35.664 3.696 L 35.232 4.064 Q 34.912 3.552 34.232 2.632 Q 33.552 1.712 33.056 1.072 L 33.44 0.704 A 16.548 16.548 0 0 1 33.837 1.197 Q 34.441 1.973 35.426 3.36 A 144.283 144.283 0 0 1 35.664 3.696 Z M 99.888 2.88 L 99.584 3.344 A 31.285 31.285 0 0 0 99.189 3.02 Q 98.603 2.546 97.561 1.731 A 337.307 337.307 0 0 0 96.88 1.2 L 97.2 0.768 L 99.888 2.88 Z M 103.664 0.272 L 104.192 0.064 L 105.216 2.416 L 104.704 2.64 L 103.664 0.272 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const XiuXi = () => (
  <svg width="30.048" height="14.48" viewBox="0 0 30.048 14.48" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 14.032 11.952 L 13.664 12.4 Q 12.08 10.816 10.992 9.064 Q 9.904 7.312 9.104 5.072 L 9.104 14.48 L 8.544 14.48 L 8.544 5.072 A 27.206 27.206 0 0 1 7.539 7.42 A 21.259 21.259 0 0 1 6.64 9.08 A 20.49 20.49 0 0 1 5.033 11.362 A 24.852 24.852 0 0 1 4.016 12.544 L 3.632 12.112 Q 5.36 10.288 6.48 8.368 A 21.422 21.422 0 0 0 7.598 6.152 A 28.505 28.505 0 0 0 8.464 3.904 L 4.4 3.904 L 4.4 3.344 L 8.544 3.344 L 8.544 0 L 9.104 0 L 9.104 3.344 L 13.712 3.344 L 13.712 3.904 L 9.184 3.904 A 24.194 24.194 0 0 0 10.144 6.401 A 18.636 18.636 0 0 0 11.144 8.32 Q 12.288 10.224 14.032 11.952 Z M 22.368 1.776 L 28 1.776 L 28 9.024 L 18.128 9.024 L 18.128 1.776 L 21.776 1.776 Q 22.172 0.778 22.289 0.481 A 16.984 16.984 0 0 0 22.32 0.4 L 22.48 0 L 23.008 0.144 Q 22.873 0.585 22.57 1.307 A 31.648 31.648 0 0 1 22.368 1.776 Z M 3.68 0.288 L 4.208 0.448 Q 3.616 2.272 2.8 3.952 L 2.8 14.48 L 2.256 14.48 L 2.256 5.04 Q 1.369 6.743 0.443 7.973 A 14.408 14.408 0 0 1 0.224 8.256 L 0 7.664 Q 0.976 6.448 2.008 4.384 Q 3.04 2.32 3.68 0.288 Z M 26.048 12.496 L 26.112 10.976 L 26.624 11.12 Q 26.583 12.215 26.565 12.549 A 6.915 6.915 0 0 1 26.56 12.64 A 2.917 2.917 0 0 1 26.513 13.026 Q 26.431 13.451 26.219 13.669 A 0.749 0.749 0 0 1 26.136 13.744 A 1.046 1.046 0 0 1 25.851 13.893 Q 25.569 13.994 25.133 14.022 A 5.525 5.525 0 0 1 24.784 14.032 L 21.408 14.032 Q 20.648 14.032 20.27 13.787 A 0.897 0.897 0 0 1 20.16 13.704 A 0.878 0.878 0 0 1 19.945 13.395 Q 19.792 13.046 19.792 12.448 L 19.792 9.936 L 20.336 9.936 L 20.336 12.368 A 2.846 2.846 0 0 0 20.351 12.675 Q 20.385 12.985 20.494 13.165 A 0.566 0.566 0 0 0 20.584 13.28 A 0.649 0.649 0 0 0 20.79 13.409 Q 21.058 13.52 21.536 13.52 L 24.704 13.52 A 5.982 5.982 0 0 0 24.989 13.514 Q 25.264 13.501 25.449 13.46 A 1.327 1.327 0 0 0 25.528 13.44 A 0.773 0.773 0 0 0 25.708 13.365 A 0.542 0.542 0 0 0 25.92 13.144 Q 26.032 12.928 26.048 12.496 Z M 18.656 4.064 L 27.472 4.064 L 27.472 2.272 L 18.656 2.272 L 18.656 4.064 Z M 18.656 6.304 L 27.472 6.304 L 27.472 4.528 L 18.656 4.528 L 18.656 6.304 Z M 27.472 6.768 L 18.656 6.768 L 18.656 8.544 L 27.472 8.544 L 27.472 6.768 Z M 16.592 13.792 L 16.144 13.536 Q 16.592 12.879 17.047 11.998 A 20.85 20.85 0 0 0 17.112 11.872 Q 17.6 10.912 17.952 10.016 L 18.432 10.192 Q 18.08 11.12 17.584 12.104 Q 17.14 12.984 16.697 13.64 A 9.59 9.59 0 0 1 16.592 13.792 Z M 27.408 10.192 L 27.84 9.904 Q 28.312 10.508 29.285 11.967 A 116.154 116.154 0 0 1 29.456 12.224 L 30.048 13.104 L 29.616 13.392 L 29.184 12.736 Q 28.102 11.113 27.561 10.392 A 11.32 11.32 0 0 0 27.408 10.192 Z M 24.576 11.776 L 24.16 12.096 Q 23.695 11.459 22.835 10.419 A 93.521 93.521 0 0 0 22.272 9.744 L 22.688 9.44 Q 23.92 10.912 24.576 11.776 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const ZhuanZhu = () => (
  <svg width="29.84" height="14.688" viewBox="0 0 29.84 14.688" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style={{ stroke: "#000", strokeWidth: "0.25mm", fill: "#000" }}><path d="M 13.744 5.344 L 13.744 5.888 L 4.816 5.888 A 43.281 43.281 0 0 1 4.517 6.809 Q 4.245 7.615 4.011 8.175 A 11.415 11.415 0 0 1 3.936 8.352 L 11.632 8.352 L 11.632 8.896 L 8.208 12.752 Q 9.952 13.52 11.312 14.144 L 11.104 14.688 Q 9.296 13.84 6.472 12.584 Q 3.648 11.328 2.032 10.656 L 2.224 10.144 Q 3.727 10.763 7.089 12.25 A 689.427 689.427 0 0 1 7.68 12.512 L 10.912 8.88 L 3.28 8.88 L 3.28 8.4 Q 3.744 7.312 4.208 5.888 L 0 5.888 L 0 5.344 L 4.384 5.344 Q 4.736 4.128 5.088 2.816 L 0.928 2.816 L 0.928 2.272 L 5.216 2.272 Q 5.552 0.848 5.712 0 L 6.272 0.08 Q 6.162 0.696 5.984 1.501 A 62.253 62.253 0 0 1 5.808 2.272 L 12.816 2.272 L 12.816 2.816 L 5.68 2.816 L 5.6 3.136 Q 5.488 3.536 5.344 4.096 Q 5.202 4.647 4.999 5.322 A 41.329 41.329 0 0 1 4.992 5.344 L 13.744 5.344 Z M 28.816 8.224 L 24.848 8.224 L 24.848 13.04 L 29.84 13.04 L 29.84 13.568 L 19.168 13.568 L 19.168 13.04 L 24.288 13.04 L 24.288 8.224 L 20.336 8.224 L 20.336 7.664 L 24.288 7.664 L 24.288 3.488 L 20.24 3.488 L 20.24 2.928 L 29.44 2.928 L 29.44 3.488 L 24.848 3.488 L 24.848 7.664 L 28.816 7.664 L 28.816 8.224 Z M 18.8 8.656 L 19.04 8.736 L 19.296 8.848 Q 19.12 9.312 16.928 14.416 L 16.4 14.208 Q 16.816 13.248 17.608 11.424 Q 18.214 10.028 18.591 9.147 A 162.955 162.955 0 0 0 18.8 8.656 Z M 19.216 6.656 L 18.912 7.104 A 420.044 420.044 0 0 1 18.596 6.859 Q 17.673 6.144 17.528 6.021 A 0.455 0.455 0 0 1 17.504 6 L 15.856 4.736 L 16.176 4.288 Q 17.184 5.04 19.216 6.656 Z M 19.84 2.832 L 19.536 3.296 A 31.285 31.285 0 0 0 19.141 2.972 Q 18.555 2.498 17.513 1.683 A 337.307 337.307 0 0 0 16.832 1.152 L 17.152 0.72 L 19.84 2.832 Z M 23.616 0.224 L 24.144 0.016 L 25.168 2.368 L 24.656 2.592 L 23.616 0.224 Z" vector-effect="non-scaling-stroke" /></g></svg>
)

const RubikRegular = readFile(join(fileURLToPath(import.meta.url), "../../../../fonts/Rubik-Regular.ttf"))
const RubikBold = readFile(join(fileURLToPath(import.meta.url), "../../../../fonts/Rubik-Bold.ttf"))

const FocusBlock = ({
  maxTime,
  currentTime,
  small,
}: {
  maxTime: number
  currentTime: number
  small?: boolean
}) => {
  const levelColor: {
    borderColor: string
    backgroundColor: string
  }[] = [
      { borderColor: "rgb(237 74 62 / 0.3)", backgroundColor: "rgb(237 74 62 / 0.2)" },
      { borderColor: "rgb(237 74 62 / 0.7)", backgroundColor: "rgb(237 74 62 / 0.5)" },
      { borderColor: "#ed4a3e", backgroundColor: "#ed4a3e" },
      { borderColor: "#c23a33", backgroundColor: "#c23a33" },
    ]
  const focusLevel = (() => {
    switch (true) {
      case (currentTime < maxTime * (1 / 4)):
        return 0
      case (currentTime < maxTime * (1 / 2)):
        return 1
      case (currentTime < maxTime * (3 / 4)):
        return 2
      default:
        return 3
    }
  })()
  return (
    <div tw={classNames(
      "flex rounded-sm border",
      small ? "w-4 h-4" : "w-8 h-8"
    )} style={{
      ...currentTime === 0 ? {
        borderColor: "#71717a40",
        backgroundColor: "rgb(113 113 122 / 0.1)",
      } :
        levelColor[focusLevel],
    }} />
  )
}

const ShareCard = ({
  time,
  focusRecord,
}: {
  time: number,
  focusRecord: number[]
}) => {
  const maxTime = (() => {
    let maxTime = 0
    for (const time of focusRecord) {
      maxTime = Math.max(maxTime, time)
    }
    return maxTime
  })()

  return (
    <div
      tw="flex flex-col bg-[#f0f0f6] w-[480px] p-6"
      style={{ fontFamily: "Rubik-Bold" }}
    >
      <div tw="flex justify-between items-center mb-4">
        <h2 tw="text-[#ed4a3e] m-0 font-bold font-xl">
          POMOTIMER
        </h2>
        <p
          tw="opacity-30"
          style={{ fontFamily: "Rubik-Regular" }}
        >
          {dayjs().format("YYYY-MM-DD hh:mm")}
        </p>
      </div>
      <div tw="flex flex-col p-6 bg-[#fafafd] rounded-2xl border border-[#71717a40]">
        <div tw="flex items-center mb-2">
          <JinRiYiZhuanZhu />
          <span tw="text-6xl text-[#ed4a3e] mx-2">
            {Math.floor(time / (60 * 60))}
          </span>
          <XiaoShi />
          <span tw="text-6xl text-[#ed4a3e] mx-2">
            {Math.floor(time % (60 * 60) / 60)}
          </span>
          <FenZhong />
        </div>
        <span tw="mb-4">
          <WoDeJinYiYueZhuanZhuQingKuang />
        </span>
        <div
          tw="flex flex-wrap place-items-stretch mb-4"
          style={{ gap: "6.8px" }}
        >
          {focusRecord.map((day, i) => (
            <FocusBlock
              key={i}
              maxTime={maxTime}
              currentTime={day}
            />
          ))}
        </div>
        <div tw="flex justify-end">
          <XiuXi />
          <div tw="mx-2 flex" style={{ gap: "0.25rem" }}>
            {Array(5).fill(null).map((_, i) => (
              <FocusBlock key={i} maxTime={5} currentTime={i} small />
            ))}
          </div>
          <ZhuanZhu />
        </div>
      </div>
      <p tw="flex justify-center m-0 mt-6" style={{
        fontFamily: "Rubik-Regular",
      }}>
        <span tw="opacity-30">https://</span>
        <span tw="text-[#ed4a3e]">{WEBSITE_URL}</span>
        <span tw="opacity-30">/</span>
      </p>
    </div>
  )
}

export const GET = async (req: NextRequest) => {
  const { searchParams } = new URL(req.url)
  const rawTime = searchParams.get("t") || "0"
  const time = parseInt(rawTime) || 0
  const hour = searchParams.get("h") || "0"
  const minute = searchParams.get("m") || "0"
  const rawFocusRecord = searchParams.get("f") || Array(30).fill(0).toString()
  const focusRecord = (() => {
    try {
      const _ = JSON.parse(rawFocusRecord) as number[]
      return _
    } catch {
      return Array(30).fill(0) as number[]
    }
  })()

  const image = new ImageResponse(
    <ShareCard
      time={time}
      focusRecord={focusRecord}
    />, {
    width: 480,
    height: 446,
    fonts: [{
      name: "Rubik-Regular",
      data: await RubikRegular,
      style: "normal",
    }, {
      name: "Rubik-Bold",
      data: await RubikBold,
      style: "normal",
    }],
  })

  return image
}
