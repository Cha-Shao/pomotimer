import dayjs from "dayjs"
import { readFile } from "fs/promises"
import {
  ImageResponse,
  NextRequest,
} from "next/server"
import { join } from "path"
import { fileURLToPath } from "url"

const JinRiYiZhuanZhu = () => (
  <svg width="78.24" height="15.024" viewBox="0 0 78.24 15.024" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style="stroke:#000;stroke-width:0.25mm;fill:#000"><path d="M 62.16 5.232 L 62.16 6.416 L 53.216 6.416 Q 52.821 7.465 52.512 8.153 A 15.911 15.911 0 0 1 52.48 8.224 L 60.352 8.224 L 60.352 9.456 L 56.992 12.656 Q 58.136 13.096 59.061 13.468 A 90.416 90.416 0 0 1 59.856 13.792 L 59.392 15.024 Q 57.904 14.366 55.57 13.464 A 171.361 171.361 0 0 0 55.008 13.248 Q 52.288 12.208 50.048 11.424 L 50.448 10.256 A 152.567 152.567 0 0 1 52.768 11.073 Q 54.157 11.574 55.712 12.16 L 58.688 9.392 L 50.992 9.392 L 50.992 8.368 Q 51.44 7.424 51.84 6.416 L 48.176 6.416 L 48.176 5.232 L 52.288 5.232 Q 52.56 4.512 52.944 3.296 L 49.04 3.296 L 49.04 2.112 L 53.312 2.112 Q 53.682 0.818 53.829 0.192 A 12.17 12.17 0 0 0 53.84 0.144 L 55.088 0.304 Q 54.912 1.12 54.624 2.112 L 61.296 2.112 L 61.296 3.296 L 54.288 3.296 Q 54.141 3.798 53.844 4.666 A 86.501 86.501 0 0 1 53.648 5.232 L 62.16 5.232 Z M 44.432 11.664 L 44.512 9.568 L 45.808 9.872 A 30.89 30.89 0 0 0 45.799 10.033 Q 45.784 10.314 45.76 10.824 Q 45.728 11.504 45.68 12.096 A 7.023 7.023 0 0 1 45.622 12.59 Q 45.545 13.081 45.406 13.399 A 1.721 1.721 0 0 1 45.352 13.512 Q 45.104 13.984 44.56 14.168 A 2.743 2.743 0 0 1 44.172 14.265 Q 43.759 14.34 43.172 14.35 A 10.963 10.963 0 0 1 42.976 14.352 L 36.08 14.352 A 7.077 7.077 0 0 1 35.497 14.33 Q 34.923 14.282 34.545 14.133 A 1.949 1.949 0 0 1 34.512 14.12 Q 33.952 13.888 33.704 13.336 Q 33.456 12.784 33.456 11.76 L 33.456 4.256 L 34.752 4.256 L 34.752 6.304 L 43.264 6.304 L 43.264 2.416 L 33.024 2.416 L 33.024 1.184 L 44.528 1.184 L 44.528 7.552 L 34.752 7.552 L 34.752 11.424 Q 34.752 12.016 34.849 12.354 A 1.23 1.23 0 0 0 34.896 12.488 Q 35.04 12.832 35.4 12.968 Q 35.704 13.083 36.275 13.101 A 7.048 7.048 0 0 0 36.496 13.104 L 42.592 13.104 Q 43.211 13.104 43.566 13.039 A 1.752 1.752 0 0 0 43.736 13 A 0.956 0.956 0 0 0 43.975 12.896 A 0.704 0.704 0 0 0 44.24 12.608 A 1.194 1.194 0 0 0 44.313 12.417 Q 44.376 12.207 44.411 11.891 A 6.052 6.052 0 0 0 44.432 11.664 Z M 77.328 8.896 L 73.648 8.896 L 73.648 12.896 L 78.24 12.896 L 78.24 14.064 L 67.6 14.064 L 67.6 12.896 L 72.416 12.896 L 72.416 8.896 L 68.608 8.896 L 68.608 7.68 L 72.416 7.68 L 72.416 4.16 L 68.432 4.16 L 68.432 2.96 L 77.856 2.96 L 77.856 4.16 L 73.648 4.16 L 73.648 7.68 L 77.328 7.68 L 77.328 8.896 Z M 19.28 14.752 L 18 14.752 L 18 1.248 L 28.432 1.248 L 28.432 14.736 L 27.152 14.736 L 27.152 13.616 L 19.28 13.616 L 19.28 14.752 Z M 0.672 7.232 L 0 6.08 A 22.273 22.273 0 0 0 2.857 4.179 A 19.484 19.484 0 0 0 3.84 3.352 A 16.274 16.274 0 0 0 5.957 1.059 A 14.315 14.315 0 0 0 6.624 0.096 L 7.76 0.096 A 16.155 16.155 0 0 0 12.666 5.082 A 20.042 20.042 0 0 0 14.32 6.064 L 13.664 7.216 Q 11.696 6.128 9.952 4.56 Q 8.208 2.992 7.184 1.344 A 14.697 14.697 0 0 1 5.791 3.124 A 19.306 19.306 0 0 1 4.424 4.48 Q 2.72 6.016 0.672 7.232 Z M 12.112 8.272 L 12.112 9.456 A 22.069 22.069 0 0 1 11.491 10.408 Q 11.132 10.93 10.699 11.509 A 44.966 44.966 0 0 1 10.152 12.224 Q 8.928 13.792 7.856 14.96 L 6.72 14.256 A 21.373 21.373 0 0 0 7.939 12.968 A 26.923 26.923 0 0 0 8.776 11.96 Q 9.808 10.656 10.528 9.488 L 1.664 9.488 L 1.664 8.272 L 12.112 8.272 Z M 27.152 8 L 19.28 8 L 19.28 12.384 L 27.152 12.384 L 27.152 8 Z M 19.28 6.752 L 27.152 6.752 L 27.152 2.496 L 19.28 2.496 L 19.28 6.752 Z M 66.56 8.8 L 67.152 9.04 L 67.712 9.248 Q 67.376 10.208 65.632 14.784 L 64.448 14.352 A 5.516 5.516 0 0 0 64.56 14.108 Q 64.852 13.443 65.56 11.584 Q 66.432 9.296 66.56 8.8 Z M 67.6 6.592 L 66.896 7.664 Q 65.01 6.161 64.074 5.486 A 19.945 19.945 0 0 0 63.92 5.376 L 64.592 4.384 Q 65.614 5.119 67.1 6.221 A 89.173 89.173 0 0 1 67.104 6.224 L 67.6 6.592 Z M 5.6 5.136 L 6.48 4.384 Q 7.08 5.033 7.981 6.198 A 66.491 66.491 0 0 1 8.56 6.96 L 7.632 7.76 Q 7.2 7.136 6.64 6.4 Q 6.159 5.768 5.737 5.289 A 13.407 13.407 0 0 0 5.6 5.136 Z M 68.048 2.544 L 67.392 3.584 L 66.224 2.72 A 77.88 77.88 0 0 1 65.554 2.228 Q 65.195 1.962 64.8 1.664 L 65.456 0.656 Q 66.688 1.52 68.048 2.544 Z M 72.896 2.96 L 71.68 0.512 L 72.8 0 L 74.064 2.416 L 72.896 2.96 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const XiaoShi = () => (
  <svg width="30.272" height="14.352" viewBox="0 0 30.272 14.352" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style="stroke:#000;stroke-width:0.25mm;fill:#000"><path d="M 28.512 3.2 L 30.272 3.2 L 30.272 4.432 L 28.512 4.432 L 28.512 12.272 A 5.576 5.576 0 0 1 28.494 12.731 Q 28.453 13.235 28.312 13.544 A 1.148 1.148 0 0 1 27.721 14.125 A 1.542 1.542 0 0 1 27.616 14.168 A 2.325 2.325 0 0 1 27.262 14.265 Q 26.886 14.34 26.354 14.35 A 9.036 9.036 0 0 1 26.176 14.352 L 24.208 14.352 L 23.968 13.072 L 25.824 13.072 Q 26.334 13.072 26.626 13.019 A 1.421 1.421 0 0 0 26.776 12.984 A 0.76 0.76 0 0 0 26.96 12.903 A 0.536 0.536 0 0 0 27.176 12.656 A 0.954 0.954 0 0 0 27.229 12.49 Q 27.268 12.317 27.277 12.065 A 4.408 4.408 0 0 0 27.28 11.904 L 27.28 4.432 L 22.368 4.432 L 22.368 3.2 L 27.28 3.2 L 27.28 0 L 28.512 0 L 28.512 3.2 Z M 3.376 12.944 L 5.344 12.944 Q 5.81 12.944 6.077 12.876 A 1.047 1.047 0 0 0 6.192 12.84 Q 6.464 12.736 6.56 12.464 A 1.243 1.243 0 0 0 6.606 12.287 Q 6.644 12.093 6.653 11.809 A 5.995 5.995 0 0 0 6.656 11.616 L 6.656 0.208 L 8.016 0.208 L 8.016 12.016 A 5.585 5.585 0 0 1 7.995 12.515 Q 7.951 13.006 7.813 13.329 A 1.563 1.563 0 0 1 7.792 13.376 Q 7.568 13.856 7.064 14.048 A 2.37 2.37 0 0 1 6.688 14.153 Q 6.316 14.228 5.804 14.238 A 8.403 8.403 0 0 1 5.632 14.24 L 3.632 14.24 L 3.376 12.944 Z M 17.984 12.768 L 17.984 13.952 L 16.832 13.952 L 16.832 1.28 L 21.696 1.28 L 21.696 12.768 L 17.984 12.768 Z M 9.68 3.44 L 10.864 2.96 Q 11.415 4.075 12.192 5.902 A 130.253 130.253 0 0 1 12.688 7.088 Q 13.676 9.478 14.241 11.049 A 42.012 42.012 0 0 1 14.368 11.408 L 13.072 11.968 Q 12.48 10.192 11.456 7.624 Q 10.54 5.327 9.842 3.791 A 44.635 44.635 0 0 0 9.68 3.44 Z M 1.2 11.84 L 0 11.264 A 22.164 22.164 0 0 0 0.855 9.515 Q 1.241 8.637 1.601 7.639 A 36.218 36.218 0 0 0 1.704 7.352 Q 2.496 5.104 2.944 3.152 L 4.256 3.424 Q 3.728 5.568 2.92 7.84 A 35.709 35.709 0 0 1 2.093 9.96 A 26.039 26.039 0 0 1 1.2 11.84 Z M 20.56 7.6 L 17.984 7.6 L 17.984 11.504 L 20.56 11.504 L 20.56 7.6 Z M 17.984 6.416 L 20.56 6.416 L 20.56 2.528 L 17.984 2.528 L 17.984 6.416 Z M 25.952 9.36 L 24.912 9.92 Q 24.528 9.152 23.912 8.024 Q 23.361 7.015 22.983 6.371 A 28.376 28.376 0 0 0 22.896 6.224 L 23.872 5.68 Q 24.202 6.219 24.6 6.909 A 87.769 87.769 0 0 1 24.976 7.568 Q 25.6 8.672 25.952 9.36 Z" vector-effect="non-scaling-stroke" /></g></svg>
)
const FenZhong = () => (
  <svg width="29.664" height="14.896" viewBox="0 0 29.664 14.896" xmlns="http://www.w3.org/2000/svg"><g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="#000" style="stroke:#000;stroke-width:0.25mm;fill:#000"><path d="M 19.04 9.456 L 19.04 12.672 L 21.04 11.456 L 21.264 12.576 L 17.888 14.56 L 17.392 13.536 Q 17.632 13.334 17.752 13.196 A 1.051 1.051 0 0 0 17.808 13.128 A 0.49 0.49 0 0 0 17.877 12.989 Q 17.92 12.86 17.92 12.672 L 17.92 9.456 L 16.096 9.456 L 16.096 8.288 L 17.92 8.288 L 17.92 6.288 L 16.864 6.288 L 16.864 5.376 L 16.528 5.936 L 15.808 4.992 A 16.067 16.067 0 0 0 16.901 2.811 A 14.786 14.786 0 0 0 16.96 2.664 Q 17.424 1.488 17.808 0.032 L 18.912 0.272 Q 18.688 1.232 18.336 2.224 L 21.248 2.224 L 21.248 3.344 L 17.888 3.344 Q 17.631 3.944 17.242 4.685 A 30.367 30.367 0 0 1 16.992 5.152 L 20.784 5.152 L 20.784 6.288 L 19.04 6.288 L 19.04 8.288 L 21.088 8.288 L 21.088 9.456 L 19.04 9.456 Z M 4.416 7.616 L 2.064 7.616 L 2.064 6.48 L 11.408 6.48 Q 11.346 7.667 11.215 9.417 A 238.267 238.267 0 0 1 11.208 9.504 Q 11.073 11.296 10.978 12.176 A 26.376 26.376 0 0 1 10.976 12.192 A 4.85 4.85 0 0 1 10.906 12.675 Q 10.858 12.917 10.787 13.116 A 1.951 1.951 0 0 1 10.616 13.48 A 1.496 1.496 0 0 1 9.91 14.079 A 1.919 1.919 0 0 1 9.784 14.128 A 2.884 2.884 0 0 1 9.358 14.237 Q 8.907 14.32 8.288 14.32 L 6.176 14.32 L 5.952 13.152 L 7.92 13.152 Q 8.624 13.152 8.992 13.032 A 1.006 1.006 0 0 0 9.284 12.884 A 0.855 0.855 0 0 0 9.528 12.6 Q 9.696 12.288 9.76 11.68 A 345.857 345.857 0 0 0 9.839 10.754 Q 9.879 10.267 9.923 9.724 A 589.564 589.564 0 0 0 9.936 9.568 Q 10.027 8.443 10.075 7.694 A 56.019 56.019 0 0 0 10.08 7.616 L 5.6 7.616 Q 5.568 7.872 5.536 8.544 A 10.613 10.613 0 0 1 5.418 9.667 Q 5.294 10.435 5.056 11.048 Q 4.656 12.08 3.728 12.992 A 8.825 8.825 0 0 1 2.96 13.658 Q 2.572 13.959 2.104 14.269 A 20.21 20.21 0 0 1 1.088 14.896 L 0.208 13.792 A 17.901 17.901 0 0 0 1.118 13.306 Q 2.041 12.776 2.624 12.264 A 5.292 5.292 0 0 0 3.292 11.567 A 3.899 3.899 0 0 0 3.832 10.664 A 5.815 5.815 0 0 0 4.089 9.899 Q 4.251 9.288 4.336 8.528 L 4.416 7.616 Z M 25.168 0.112 L 26.304 0.112 L 26.304 3.056 L 29.664 3.056 L 29.664 9.84 L 26.304 9.84 L 26.304 14.736 L 25.168 14.736 L 25.168 9.84 L 21.792 9.84 L 21.792 3.056 L 25.168 3.056 L 25.168 0.112 Z M 7.92 0.432 L 9.04 0 A 14.522 14.522 0 0 0 9.845 1.818 Q 10.347 2.759 10.951 3.502 A 8.889 8.889 0 0 0 11.032 3.6 A 10.54 10.54 0 0 0 12.497 5.025 Q 13.239 5.624 14.149 6.173 A 17.359 17.359 0 0 0 14.208 6.208 L 13.536 7.376 A 17.66 17.66 0 0 1 11.769 6.09 Q 10.898 5.365 10.238 4.592 A 10.674 10.674 0 0 1 10.104 4.432 A 11.401 11.401 0 0 1 8.931 2.679 Q 8.375 1.667 7.92 0.432 Z M 4.944 0.256 L 6.064 0.72 Q 5.168 2.784 3.856 4.4 Q 2.544 6.016 0.688 7.376 L 0 6.32 Q 1.6 5.216 2.864 3.656 Q 4.128 2.096 4.944 0.256 Z M 25.168 4.16 L 22.912 4.16 L 22.912 8.688 L 25.168 8.688 L 25.168 4.16 Z M 28.56 4.16 L 26.304 4.16 L 26.304 8.688 L 28.56 8.688 L 28.56 4.16 Z" vector-effect="non-scaling-stroke" /></g></svg>
)

const RubikRegular = readFile(join(fileURLToPath(import.meta.url), "../../../../fonts/Rubik-Regular.ttf"))
const RubikBold = readFile(join(fileURLToPath(import.meta.url), "../../../../fonts/Rubik-Bold.ttf"))

const ShareCard = ({
  hour,
  minute,
  focusRecord,
}: {
  hour: string,
  minute: string,
  focusRecord: number[]
}) => {
  return (
    <div style={{
      fontFamily: "Rubik-Bold",
      display: "flex",
      flexDirection: "column",
      backgroundColor: "#f0f0f6",
      width: "800px",
      height: "450px",
      padding: "1.5rem",
    }}>
      <div style={{
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        marginBottom: "1rem",
      }}>
        <h2 style={{
          color: "#ed4a3e",
          margin: "0",
          fontWeight: "700",
          fontSize: "1.5rem",
        }}>
          POMOTIMER
        </h2>
        <p style={{ fontFamily: "Rubik-Regular", opacity: 0.33 }}>
          {dayjs().format("YYYY-MM-DD hh:mm")}
        </p>
      </div>
      <div style={{
        display: "flex",
        flexDirection: "column",
        padding: "1.5rem",
        backgroundColor: "#fafafd",
        borderRadius: "1rem",
        border: "1px solid #71717a40",
      }}>
        <div style={{ display: "flex", alignItems: "center" }}>
          <JinRiYiZhuanZhu />
          <span style={{ fontSize: "3rem", color: "#ed4a3e", margin: "0 0.5rem" }}>{hour}</span>
          <XiaoShi />
          <span style={{ fontSize: "3rem", color: "#ed4a3e", margin: "0 0.5rem" }}>{minute}</span>
          <FenZhong />
        </div>
      </div>
    </div>
  )
}

export const GET = async (req: NextRequest) => {
  const { searchParams } = new URL(req.url)
  const hour = searchParams.get("h") || "0"
  const minute = searchParams.get("m") || "0"
  const rawFocusRecord = searchParams.get("f") || `[${Array(30).fill(0).join(",")}]`
  const focusRecord = (() => {
    try {
      const _ = JSON.parse(rawFocusRecord) as number[]
      return Array(30).fill(0) as number[]
    } catch {
      return Array(30).fill(0) as number[]
    }
  })()

  const image = new ImageResponse(
    <ShareCard
      hour={hour}
      minute={minute}
      focusRecord={focusRecord}
    />, {
    width: 800,
    height: 450,
    fonts: [{
      name: "Rubik-Regular",
      data: await RubikRegular,
      style: "normal",
    }, {
      name: "Rubik-Bold",
      data: await RubikBold,
      style: "normal",
    }],
  })

  return image
}
